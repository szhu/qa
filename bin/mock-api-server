#!/usr/bin/env python
from BaseHTTPServer import HTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler


def get_blob_sha(content):
    import sha
    header = "blob %s\0" % len(content)
    return sha.new(header + content).hexdigest()


class PathMatcher:
    '''
    A simple URL path matcher that uses Rails route syntax.
    http://guides.rubyonrails.org/routing.html#route-globbing-and-wildcard-segments

    >>> m = PathMatcher('/api/repos/local/repo/contents/docs/index.md?some=query')
    >>> m.match('/api/repos/:user/:repo/contents/*path', debug=True)
    /api/repos/(?P<user>[^/]+)/(?P<repo>[^/]+)/contents/(?P<path>.*)$
    True
    >>> m.last_match.groupdict()
    {'repo': 'repo', 'path': 'docs/index.md', 'user': 'local'}
    >>> m['user']
    'local'
    >>> m['repo']
    'repo'
    >>> m['path']
    'docs/index.md'
    >>> m.query
    'some=query'
    '''
    def __init__(self, path):
        self.last_match = None

        parts = path.split('?', 1)
        self.path = parts[0]
        self.query = parts[1] if len(parts) > 1 else None

    def match(self, route, debug=False):
        import re
        pattern = self.convert_route_to_re(route)
        if debug:
            print pattern
        self.last_match = re.match(pattern, self.path)
        return bool(self.last_match)

    @classmethod
    def convert_route_to_re(self, route):
        return r'/'.join(
            self.convert_route_part_to_re(part)
            for part in route.split('/')
        ) + r'$'

    @classmethod
    def convert_route_part_to_re(self, part):
        import re
        m = re.match(r'([:*])(\w+)$', part)

        if not m:
            return part
        elif m.group(1) == '*':
            return r'(?P<%s>.*)' % m.group(2)
        elif m.group(1) == ':':
            return r'(?P<%s>[^/]+)' % m.group(2)

    def __getitem__(self, key):
        return self.last_match.group(key)


class QaMockServerRequestHandler(SimpleHTTPRequestHandler):
    def translate_path(self, path):
        import os
        import posixpath
        import urllib

        """Translate a /-separated PATH to the local filename syntax.
        Components that mean special things to the local file system
        (e.g. drive or directory names) are ignored.  (XXX They should
        probably be diagnosed.)
        """
        # abandon query parameters
        path = path.split('?', 1)[0]
        path = path.split('#', 1)[0]
        path = posixpath.normpath(urllib.unquote(path))
        words = path.split('/')
        words = filter(None, words)

        # Only the following line is modified
        path = self.server.asset_root
        # End modifications

        for word in words:
            drive, word = os.path.splitdrive(word)
            head, word = os.path.split(word)
            if word in (os.curdir, os.pardir): continue
            path = os.path.join(path, word)
        return path

    def send_augmented_index_page(self):
        import json
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        with open(self.server.asset_path('index.html')) as f:
            self.wfile.write(f.read())
        self.wfile.write(
            '''<script>window.qaLocalConfig = %s;</script>'''
            % json.dumps({"useMockGithubApi": True}))

    def receive_json_request(self):
        import json
        content = self.rfile.read(int(self.headers['content-length']))
        return json.loads(content)

    def send_json_response(self, code, data):
        import json
        self.send_response(code)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        json.dump(data, self.wfile)

    def do_GET(self):
        m = PathMatcher(self.path)
        if m.match('/api/repos/:user/:repo/contents/*path'):
            try:
                successful_response = self.do_read_file(m['user'], m['repo'], m['path'])
            except IOError as e:
                self.send_json_response(404, {"message": "Not Found", "details": str(e)})
            else:
                self.send_json_response(200, successful_response)
        elif m.match('/api/*path'):
            self.send_json_response(400, {"error": "Invalid API method"})
        elif m.match('/'):
            self.send_augmented_index_page()
        else:
            SimpleHTTPRequestHandler.do_GET(self)

    def do_PUT(self):
        m = PathMatcher(self.path)
        if m.match('/api/repos/:user/:repo/contents/*path'):
            request_payload = self.receive_json_request()
            old_sha = request_payload['sha'] if 'sha' in request_payload else None
            try:
                successful_response = self.do_write_file(m['user'], m['repo'], m['path'], old_sha, request_payload['content'])
            except IOError as e:
                self.send_json_response(404, {"message": "Not Found", "details": str(e)})
            else:
                self.send_json_response(200, successful_response)
        else:
            self.send_json_response(400, {"error": "Invalid API method"})

    def do_read_file(self, user, repo, path):
        from base64 import b64encode
        from os.path import basename

        if (user, repo) != ('local', 'repo'):
            raise IOError("This mock server can only return data for the repo 'local/repo'.")

        with open(self.server.content_path(path), 'rb') as f:
            content = f.read()

        return {
            "name": basename(path),
            "path": path,
            "sha": get_blob_sha(content),
            "size": len(content),
            "type": "file",
            "content": b64encode(content),
            "encoding": "base64",
        }

    def do_write_file(self, user, repo, path, old_sha, b64content):
        from base64 import b64decode
        from os.path import basename, exists

        if exists(self.server.content_path(path)):
            with open(self.server.content_path(path), 'rb') as f:
                actual_old_content = f.read()
            actual_old_sha = get_blob_sha(actual_old_content)
        else:
            actual_old_sha = None

        if old_sha != actual_old_sha:
            raise IOError(
                "Old SHA doesn't match. Given SHA: %s, actual old SHA: %s"
                % (old_sha, actual_old_sha)
            )

        content = b64decode(b64content)
        with open(self.server.content_path(path), 'wb') as f:
            f.write(content)

        return {
            "content": {
                "name": basename(path),
                "path": path,
                "sha": get_blob_sha(content),
                "size": len(content),
                "type": "file",
            },
        }


class QaMockServer(HTTPServer):
    def __init__(self, address_binding, asset_root, content_root):
        HTTPServer.__init__(self, address_binding, QaMockServerRequestHandler)
        self.asset_root = asset_root
        self.content_root = content_root

    def asset_path(self, path):
        from os.path import join
        return join(self.asset_root, path)

    def content_path(self, path):
        from os.path import join
        return join(self.content_root, path)


if __name__ == "__main__":
    from argparse import ArgumentParser
    from os.path import dirname
    from sys import argv

    parser = ArgumentParser(description='A simple mock server for testing content locally.')
    parser.add_argument(dest='DOCUMENT_ROOT', type=str, nargs='?', default='.')
    parser.add_argument('-b', '--binding', type=int, dest='PORT', default=8000)
    parser.add_argument('-p', '--port', type=str, dest='IP', default='localhost')
    args = parser.parse_args()

    # argv[0] is something like /path/to/qa/repo/bin/mock-api-server
    # asset_root should be like /path/to/qa/repo
    asset_root = dirname(dirname(argv[0]))

    server = QaMockServer((args.IP, args.PORT), asset_root, args.DOCUMENT_ROOT)
    server.serve_forever()
